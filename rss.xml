<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Sohaib's Blog]]></title><description><![CDATA[A blog about my wanderings in technology and life]]></description><link>https://sohaibtariq.github.io</link><generator>RSS for Node</generator><lastBuildDate>Tue, 01 Oct 2019 07:44:39 GMT</lastBuildDate><item><title><![CDATA[My Professional Journey as a Software Engineer]]></title><description><![CDATA[I got hired straight out of university as a Backend Engineer. The first project I was assigned to had 
a Spring Boot backend.  I had veryâ€¦]]></description><link>https://sohaibtariq.github.io/java-dontnet/</link><guid isPermaLink="false">https://sohaibtariq.github.io/java-dontnet/</guid><pubDate>Sat, 28 Sep 2019 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;I got hired straight out of university as a Backend Engineer. The first project I was assigned to had
a Spring Boot backend.  I had very little Java development experience at the time; most of my time at
university was spent working with Python and C/C++. So I got to work learning Java. &lt;/p&gt;
&lt;p&gt;I spent close to a year and a half working with Java, halfway through this period I was moved to a fullstack role
so I picked up some Angular 7 as well. I was mostly doing API development and some integrations, all
packaged nicely in microservices. It was rather fun, except for the rare occassions I ran into
issues due to the limitations of Java. One case that stands out significantly was a scenario where I
needed to write a service that could potentially parse any arbitrary JSON string and retrieve any value nested
n levels deep. It wasnt so much a java issue as a static typing issue. How do you parse an object that could
potentially have n levels of nested Objects of all types without knowing the structure beforehand.
I was pulling my hair out over it for what now feels like a week but I&apos;m pretty sure my mind is exaggerating.
I was unable to find a way to do this in Java so I finally gave up and wrote the solution in Javascript using the Nashorn
Engine. It wasn&apos;t very perfmormant, but it got the job done.  &lt;/p&gt;
&lt;p&gt;Long story short, most of my journey as a Java Engineer was smooth sailing till the end; and end it did. The project
I was working on shut down abruptly. I had nothing to do with that. I hope ðŸ˜•&lt;/p&gt;
&lt;p&gt;Since there weren&apos;t any other Java/Spring projects at my company, I was moved to a project with a C#/.NET Core stack.
This marked a milestone in my journey, a challenge, if you will. I was fairly proficient at my tech stack, could
I effectively translate my prior knowledge to another stack and toolset and become fairly productive quickly ? &lt;/p&gt;
&lt;p&gt;Challenge Accepted ðŸ˜ 	&lt;/p&gt;
&lt;p&gt;I am now almost a month into my transition. So far so good. I have to admit the first week was nervy. Not only
was I supposed to work on an entirely new technology stack , but I also had to
contend with understanding an entirely new functional domain for a fairly large enterprise application. I was
more worried about the former, but in retrospect, it was the latter that proved to be the bigger challenge of the two.
But thats another story.&lt;/p&gt;
&lt;p&gt;I had previously been working with a code first approach and frankly, wasnt even aware that there was any other approach ðŸ˜–.
This new project is all DB first. I feel DB first is a little simpler but that might just be in my head. So thats
a welcome change. &lt;/p&gt;
&lt;p&gt;I also struggled a bit with the toolset. I&apos;m a big fan of Intellij, I had been using Intellij IDEA as my primary IDE
all through my Java project. I was so used to the shortcut keys and the nifty fatures here and there that I
felt handicapped coding in Visual Studio. The shortcut keys are all weird and the Immediate window is not quite
as handy as the Evaluate Expression window in Intellij. It wasn&apos;t until after I started getting accustomed to Visual
Studio, that I discovered I could have changed the keyboard mapping scheme to VS Code which would essentially give me
the shortcuts I was missing. Such a shame ðŸ˜¢. &lt;/p&gt;
&lt;p&gt;Another pain point for me was SQL. I had previously been using MySQL Workbench for interacting with our MySQL databases.
Now I was being forced to use SQL Server and with it, SQL Server Management Studio.&lt;/p&gt;
&lt;p&gt;A very convenient feature that Workbench offers is that if you make changes to tables interactively, it shows you the
corresponding SQL statements before applying them. You can copy those statements and use them to replicate the same
changes in your other environments. I have yet to find something similar in MS SQL Server Management Studio,
In the meantime I have had to resort to writing queries manually for even trivial inserts and updates.  &lt;/p&gt;
&lt;p&gt;It took me a month, but I am now approaching the levels of productivity that I was used to with my previous tech stack ðŸ’ª .
When we factor in the fact that some of that time was also spent learning about the product, I dont think thats too bad.&lt;/p&gt;
&lt;p&gt;All in all, it has been a positive experience so far. I was getting too set in my ways working on the same stack, following
the same architectural patterns. This has forced me to step out of my comfort zone and learn some cool new things.
Part of it has been the change in technology and part of it has been the fact that I am now working on an
entirely new project with its
own set of unique requirements.&lt;/p&gt;
&lt;p&gt;I feel its important for budding software engineers to try different tools, technologies, design patterns and
functional domains so they can keep learning and growing. Its a little intimidating during the fact, but
looking back, its worth it. &lt;/p&gt;
&lt;p&gt;Heres to hoping for more positive change, learning and growth. Cheers.  &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Exponential backoff for AWS Lambda]]></title><description><![CDATA[I recently set up a Lambda function that reads data from an SQS Queue 
and makes an API call to one of our microservices. 
Naturally, thisâ€¦]]></description><link>https://sohaibtariq.github.io/exponential-backoff/</link><guid isPermaLink="false">https://sohaibtariq.github.io/exponential-backoff/</guid><pubDate>Mon, 19 Aug 2019 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;I recently set up a Lambda function that reads data from an SQS Queue
and makes an API call to one of our microservices.
Naturally, this calls for an error handling mechanism, considering that the microservice
could be down or unresponsive.&lt;/p&gt;
&lt;p&gt;AWS Lambda provides its own retry mechanism where a message is picked up from the queue by the Lambda
consumer and becomes invisible to other consumers for a specific duration called the &lt;em&gt;visibility timeout&lt;/em&gt;.
If the consumer completes execution successfully, it automatically deletes the message from the queue.
In case of unsuccesful execution (such as a Runtime Exception), the &lt;em&gt;approximate receive count&lt;/em&gt;
of the message is incremented and it becomes available to other consumers after the &lt;em&gt;visibility timeout&lt;/em&gt; passes.
The number of times a message can be re-read from the queue
before it is finally sent to a Dead Letter Queue(DLQ) is configured in the Redrive policy of the
SQS Queue and is tracked via the &lt;em&gt;approximate receive count&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This retry mechanism was not exactly what I had in mind for our use case. I was thinking along the
lines of a backoff strategy that keeps retrying the API call with exponentially increasing wait time;
finally sending the message to a DLQ after a set number of retries. This would give us ample time to
fix any issues with our miscroservice and prevent it from being bombarded with failing API calls. &lt;/p&gt;
&lt;p&gt;This is what I ended up with: &lt;/p&gt;
&lt;p&gt;First, a very basic Java function to calculate the exponential wait time, given the number of
retries &lt;strong&gt;recvCount&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;        int randomInt = rand.nextInt(60);
        Long result = new Double(Math.pow(2, recvCount)).longValue() + 30 +randomInt;  //adding jitter to new random visibility timeout&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the addition of &lt;strong&gt;randomInt&lt;/strong&gt;. That is &apos;jitter&apos;. A bit of randomness. I read about it in some
&lt;a href=&quot;https://cloud.google.com/storage/docs/exponential-backoff&quot;&gt;documentation&lt;/a&gt; by Google Cloud and included
it as a good practice.&lt;/p&gt;
&lt;p&gt;Next up, set the visibility timeout of the message to the value that we just calculated above. The maximum value allowed by AWS is 43200 seconds
or 12 hours. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  sqs.changeMessageVisibility(queueUrl, msg.getReceiptHandle(), newVisibilityTimeout.intValue());&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we check the response to our API call. If it is a 400 or 500 series response, we throw a Runtime Exception and change the visibility timeout of the
message. This is
the easiest way I could come up with to signal unsuccessful execution of the Lambda function. Plus, we can only throw unchecked exceptions
in our handler method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;...
// api call
...  
 if (response.getStatusLine().getStatusCode() &amp;gt;= 400){
                            new ExponentialBackoff().setVisibilityTimeout(msg);
                            throw new RuntimeException(&amp;quot;Request to server failed&amp;quot;);
                        }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ExponentialBackoff is my utility class where the code that calculates and sets the visibility timeout lives. It also has some other
utility functions that are not essential for this demonstration.&lt;/p&gt;
&lt;p&gt;There you have it; A bare bones exponential backoff implementation for AWS Lambda. &lt;/p&gt;</content:encoded></item></channel></rss>