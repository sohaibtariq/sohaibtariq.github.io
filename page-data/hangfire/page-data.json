{"componentChunkName":"component---src-templates-blog-post-js","path":"/hangfire/","webpackCompilationHash":"7b2282eaff83accca827","result":{"data":{"site":{"siteMetadata":{"title":"Sohaib's Blog","author":"Sohaib Tariq"}},"markdownRemark":{"id":"a3202771-27fb-5913-867c-bfd7a05c43c3","excerpt":"I just set up a Hangfire dashboard for our .NET Core application. As a security measure, the hangfire dashboard only allows local requests. If you wish toâ€¦","html":"<p>\nI just set up a Hangfire dashboard for our .NET Core application. As a security measure, the hangfire dashboard only allows local requests. If you wish to access the dashboard on a production server, you need to set up some form of Authorization by creating an implementation of IDashboardAuthorizationFilter. Now, there are a number of ways to do this, depending on your reuirements. All we needed was a quick solution that would allow us to see our dashboard on our development server.</p>\n<p>If you are also looking for a quick and dirty solution,here is how I did it :</p>\n<p>First, create an implementation of <em>IDashboardAuthorizationFilter</em>. We provide this implementation in the form of an Action Filter called <em>HangfireAuthorizationFilter</em></p>\n<p>You are now required to implement the Authorize method. We will authorize our user using credentials supplied in the query string. We simply store a username and password in our <em>appsetting.json</em> and correlate the supplied credentials with these stored credentials. If they match, we store them in a <strong>session cookie</strong> and return true, completing the Auth process. </p>\n<p>Why do we need a cookie you say? thats because hangfire periodically makes requests to the application server in order to provide realtime data. Therefore, although the first request will contain the credentials in the query string, all subsequent calls will not, and hence, they will return a 401 status code. We fix this by including a session cookie in the reponse of our auth call. All subsequent requests made in that same session will contain this cookie and we can reauhtorize each incoming request. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public bool Authorize(DashboardContext context)\n        {\n            var httpContext = context.GetHttpContext();\n            \n            string userName = _settings.UserName;\n            string password = _settings.Password;\n\n            //if user has already logged in, in this session, subsequent requests will read credentials from cookie\n            if (httpContext.Request.Cookies[&quot;user&quot;] != null &amp;&amp; httpContext.Request.Cookies[&quot;pwd&quot;] != null\n                &amp;&amp; httpContext.Request.Cookies[&quot;user&quot;].Equals(userName) &amp;&amp; httpContext.Request.Cookies[&quot;pwd&quot;].Equals(password)) {              \n                \n                    return true;\n                }\n\n            else if (context.Request.GetQuery(&quot;user&quot;) != null &amp;&amp; context.Request.GetQuery(&quot;pwd&quot;) != null\n                    &amp;&amp; context.Request.GetQuery(&quot;user&quot;).Equals(userName) &amp;&amp; context.Request.GetQuery(&quot;pwd&quot;).Equals(password))\n            {\n                //Store credentials in cookie so that subsequent requests dont require them\n                httpContext.Response.Cookies.Append(&quot;user&quot;, userName);\n                httpContext.Response.Cookies.Append(&quot;pwd&quot;, password);\n                return true;\n            }\n\n            else return false;\n        }</code></pre></div>\n<p>Next, simply include you implemenation of <em>IDashboardAuthorizationFilter</em> in your startup file and youre done.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.UseHangfireDashboard(&quot;/hangfire&quot;, new DashboardOptions\n               {\n                   IsReadOnlyFunc = (DashboardContext context) =&gt; _hangfireSettings.MakeDashboardReadonly,\n                   Authorization = new[] { new HangFireAuthorizationFilter(_hangfireSettings)}\n\n               }); </code></pre></div>","frontmatter":{"title":"Barebones Authorization for Hangfire Dashboard","date":"October 21, 2019","description":"Setting up Authorization for Hangfire Dashboard to allow requests on production server","tags":[".NET Core"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/hangfire/","previous":{"fields":{"slug":"/java-dontnet/"},"frontmatter":{"title":"My Professional Journey as a Software Engineer","tags":["Career"]}},"next":null}}}