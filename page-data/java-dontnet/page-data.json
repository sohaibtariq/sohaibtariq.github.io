{"componentChunkName":"component---src-templates-blog-post-js","path":"/java-dontnet/","webpackCompilationHash":"7b2282eaff83accca827","result":{"data":{"site":{"siteMetadata":{"title":"Sohaib's Blog","author":"Sohaib Tariq"}},"markdownRemark":{"id":"9c433694-c569-5556-a9aa-cbca61773b1d","excerpt":"I got hired straight out of university as a Backend Engineer. The first project I was assigned to had \na Spring Boot backend.  I had very little Javaâ€¦","html":"<p>I got hired straight out of university as a Backend Engineer. The first project I was assigned to had\na Spring Boot backend.  I had very little Java development experience at the time; most of my time at\nuniversity was spent working with Python and C/C++. So I got to work learning Java. </p>\n<p>I spent close to a year and a half working with Java, halfway through this period I was moved to a fullstack role\nso I picked up some Angular 7 as well. I was mostly doing API development and some integrations, all\npackaged nicely in microservices. It was rather fun, except for the rare occassions I ran into\nissues due to the limitations of Java. One case that stands out significantly was a scenario where I\nneeded to write a service that could potentially parse any arbitrary JSON string and retrieve any value nested\nn levels deep. It wasnt so much a java issue as a static typing issue. How do you parse an object that could\npotentially have n levels of nested Objects of all types without knowing the structure beforehand.\nI was pulling my hair out over it for what now feels like a week but I'm pretty sure my mind is exaggerating.\nI was unable to find a way to do this in Java so I finally gave up and wrote the solution in Javascript using the Nashorn\nEngine. It wasn't very perfmormant, but it got the job done.  </p>\n<p>Long story short, most of my journey as a Java Engineer was smooth sailing till the end; and end it did. The project\nI was working on shut down abruptly. I had nothing to do with that. I hope ðŸ˜•</p>\n<p>Since there weren't any other Java/Spring projects at my company, I was moved to a project with a C#/.NET Core stack.\nThis marked a milestone in my journey, a challenge, if you will. I was fairly proficient at my tech stack, could\nI effectively translate my prior knowledge to another stack and toolset and become fairly productive quickly ? </p>\n<p>Challenge Accepted ðŸ˜ \t</p>\n<p>I am now almost a month into my transition. So far so good. I have to admit the first week was nervy. Not only\nwas I supposed to work on an entirely new technology stack , but I also had to\ncontend with understanding an entirely new functional domain for a fairly large enterprise application. I was\nmore worried about the former, but in retrospect, it was the latter that proved to be the bigger challenge of the two.\nBut thats another story.</p>\n<p>I had previously been working with a code first approach and frankly, wasnt even aware that there was any other approach ðŸ˜–.\nThis new project is all DB first. I feel DB first is a little simpler but that might just be in my head. So thats\na welcome change. </p>\n<p>I also struggled a bit with the toolset. I'm a big fan of Intellij, I had been using Intellij IDEA as my primary IDE\nall through my Java project. I was so used to the shortcut keys and the nifty fatures here and there that I\nfelt handicapped coding in Visual Studio. The shortcut keys are all weird and the Immediate window is not quite\nas handy as the Evaluate Expression window in Intellij. It wasn't until after I started getting accustomed to Visual\nStudio, that I discovered I could have changed the keyboard mapping scheme to VS Code which would essentially give me\nthe shortcuts I was missing. Such a shame ðŸ˜¢. </p>\n<p>Another pain point for me was SQL. I had previously been using MySQL Workbench for interacting with our MySQL databases.\nNow I was being forced to use SQL Server and with it, SQL Server Management Studio.</p>\n<p>A very convenient feature that Workbench offers is that if you make changes to tables interactively, it shows you the\ncorresponding SQL statements before applying them. You can copy those statements and use them to replicate the same\nchanges in your other environments. I have yet to find something similar in MS SQL Server Management Studio,\nIn the meantime I have had to resort to writing queries manually for even trivial inserts and updates.  </p>\n<p>It took me a month, but I am now approaching the levels of productivity that I was used to with my previous tech stack ðŸ’ª .\nWhen we factor in the fact that some of that time was also spent learning about the product, I dont think thats too bad.</p>\n<p>All in all, it has been a positive experience so far. I was getting too set in my ways working on the same stack, following\nthe same architectural patterns. This has forced me to step out of my comfort zone and learn some cool new things.\nPart of it has been the change in technology and part of it has been the fact that I am now working on an\nentirely new project with its\nown set of unique requirements.</p>\n<p>I feel its important for budding software engineers to try different tools, technologies, design patterns and\nfunctional domains so they can keep learning and growing. Its a little intimidating during the fact, but\nlooking back, its worth it. </p>\n<p>Heres to hoping for more positive change, learning and growth. Cheers.  </p>","frontmatter":{"title":"My Professional Journey as a Software Engineer","date":"September 28, 2019","description":"Climbing up, sideways and (sometimes) down the ladder of Software Engineering","tags":["Career"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/java-dontnet/","previous":{"fields":{"slug":"/exponential-backoff/"},"frontmatter":{"title":"Exponential backoff for AWS Lambda","tags":["AWS","Java"]}},"next":{"fields":{"slug":"/hangfire/"},"frontmatter":{"title":"Barebones Authorization for Hangfire Dashboard","tags":[".NET Core"]}}}}}